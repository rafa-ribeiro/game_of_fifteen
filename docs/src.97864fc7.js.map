{"version":3,"sources":["src/piece.js","src/board.js","src/input.js","src/game.js","src/index.js"],"names":["Piece","game","value","width","height","rowIndex","columnIndex","position","updateCanvasPosition","speed","maxSpeed","isMovingX","isMovingY","x","y","ctx","isEmpty","fillStyle","fillRect","font","textAlign","textBaseline","fillText","_moveHorizontally","_moveVertically","deltaTime","hasArrived","emptySpace","board","_stopMoving","updateBoardMatrix","console","log","boardMatrix","Board","boardSpaces","piecesList","rowEmptyPiece","columnEmptyPiece","isMoving","emptyBoard","forEach","row","pieceValue","push","templateBoard","piecesRow","piece","Array","from","space","draw","update","newEmptySpaceColumn","pieceToMove","_getPieceToMoveBy","moveLeft","moveRight","rowIdxPieceToMove","moveUp","moveDown","rowsSize","length","columnsSize","pieceToUpdate","emptyRowIndex","emptyColumnIndex","pieceRowIndex","pieceColumnIndex","InputHandler","document","addEventListener","event","keyCode","Game","canvas","getElementById","getContext","GAME_WIDTH","GAME_HEIGHT","lastTime","gameLoop","timestamp","clearRect","requestAnimationFrame"],"mappings":"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","file":"src.97864fc7.js","sourceRoot":"..","sourcesContent":["export default class Piece {\n\n    constructor(game, value, width, height, rowIndex, columnIndex) {\n        this.game = game;\n        this.value = value;\n        this.width = width;\n        this.height = height;\n\n        // Piece`s position on board\n        this.rowIndex = rowIndex;\n        this.columnIndex = columnIndex;\n\n        this.position = null;\n        this.updateCanvasPosition();\n\n        // To move piece\n        this.speed = 0;\n        this.maxSpeed = 6;\n\n        this.isMovingX = false;\n        this.isMovingY = false;\n    }\n\n    updateCanvasPosition() {\n        this.position = {\n            x: 10 + (this.columnIndex * this.width + (10 * this.columnIndex)), \n            y: 10 + (this.rowIndex * this.height + (10 * this.rowIndex))\n        };\n    }\n\n    draw(ctx) {\n        let isEmpty = this.value === 0;\n\n        ctx.fillStyle = \"rgba(38, 79, 114)\";\n        if (isEmpty) {\n            ctx.fillStyle = \"rgba(38, 79, 114, 0.4)\";\n        }\n        ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n\n        if (!isEmpty) {\n            ctx.font = \"40px Arial\";\n            ctx.fillStyle = \"white\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n\n            let x = this.position.x + (this.width / 2);\n            let y = this.position.y + (this.height / 2);\n            ctx.fillText(this.value, x, y);\n        }   \n    }\n\n    moveLeft() {\n        this._moveHorizontally();\n        this.speed = -this.maxSpeed;\n    }\n\n    moveRight() {\n        this._moveHorizontally();\n        this.speed = this.maxSpeed;\n    }\n\n    _moveHorizontally() {\n        this.isMovingX = true;\n        this.isMovingY = false; \n    }\n\n    moveDown() {\n        this._moveVertically();\n        this.speed = this.maxSpeed;\n    }\n\n    moveUp() {\n        this._moveVertically();\n        this.speed = -this.maxSpeed;\n    }\n\n    _moveVertically() {\n        this.isMovingX = false;\n        this.isMovingY = true; \n    }\n\n    _stopMoving() {\n        this.isMovingX = false;\n        this.isMovingY = false;\n        this.speed = 0;\n    }\n\n    update(deltaTime) {\n\n        let hasArrived = false;\n\n        if (this.isMovingX) {\n            let emptySpace = this.game.board.emptySpace;\n\n            this.position.x = this.position.x + this.speed;\n\n            if (this.speed > 0) {\n                hasArrived = this.position.x >= emptySpace.position.x;\n            } else if (this.speed < 0) {\n                hasArrived = this.position.x <= emptySpace.position.x;\n            }\n\n        } else if (this.isMovingY) {\n            let emptySpace = this.game.board.emptySpace;\n\n            this.position.y = this.position.y + this.speed;\n\n            if (this.speed > 0) {\n                hasArrived = this.position.y >= emptySpace.position.y;\n            } else if (this.speed < 0) {\n                hasArrived = this.position.y <= emptySpace.position.y;\n            }\n        }\n\n        if (hasArrived) {\n            this._stopMoving();\n            this.game.board.updateBoardMatrix(this);\n            console.log(this.game.board.boardMatrix);\n        }\n    }\n}","import Piece from \"/src/piece\";\n\nexport default class Board {\n\n    constructor(game) {\n        this.boardSpaces = []\n        this.piecesList = [];\n\n        let pieceWidth = 80;\n        let pieceHeight = 80;\n\n        this.boardMatrix = [];\n\n        this.rowEmptyPiece = null;\n        this.columnEmptyPiece = null;\n\n        this.emptySpace = null;\n\n        this.isMoving = false;\n\n        emptyBoard.forEach((row, rowIndex) => {\n            row.forEach((pieceValue, columnIndex) => {\n                this.boardSpaces.push(new Piece(game, pieceValue, pieceWidth, pieceHeight, rowIndex, columnIndex));\n            });\n        });\n\n        templateBoard.forEach((row, rowIndex) => {\n\n            let piecesRow = []\n\n            row.forEach((pieceValue, columnIndex) => {\n                let piece = new Piece(game, pieceValue, pieceWidth, pieceHeight, rowIndex, columnIndex);\n                this.piecesList.push(piece);\n                piecesRow.push(piece);\n\n                if (pieceValue === 0) {\n                    this.emptySpace = piece;\n                }\n            });\n\n            this.boardMatrix.push(Array.from(piecesRow));\n        });\n    }\n\n    draw(ctx) {\n        this.boardSpaces.forEach(space => {\n            space.draw(ctx);\n        });\n\n        this.piecesList.forEach(piece => {\n            piece.draw(ctx);\n        });\n    }\n\n    update(deltaTime) {\n        this.piecesList.forEach(piece => piece.update(deltaTime));\n    }\n\n    moveLeft() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let newEmptySpaceColumn = this.emptySpace.columnIndex + 1;\n            let pieceToMove = this._getPieceToMoveBy(this.emptySpace.rowIndex, newEmptySpaceColumn);\n\n            if (pieceToMove) {\n                pieceToMove.moveLeft();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveRight() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let newEmptySpaceColumn = this.emptySpace.columnIndex - 1;\n            let pieceToMove = this._getPieceToMoveBy(this.emptySpace.rowIndex, newEmptySpaceColumn);\n\n            if (pieceToMove) {\n                pieceToMove.moveRight();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveUp() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let rowIdxPieceToMove = this.emptySpace.rowIndex + 1;\n            let pieceToMove = this._getPieceToMoveBy(rowIdxPieceToMove, this.emptySpace.columnIndex);\n\n            if (pieceToMove) {\n                pieceToMove.moveUp();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveDown() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let rowIdxPieceToMove = this.emptySpace.rowIndex - 1;\n            let pieceToMove = this._getPieceToMoveBy(rowIdxPieceToMove, this.emptySpace.columnIndex);\n\n            if (pieceToMove) {\n                pieceToMove.moveDown();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    _getPieceToMoveBy(rowIndex, columnIndex) {\n        let pieceToMove = null;\n\n        let rowsSize = this.boardMatrix.length;\n        let columnsSize = this.boardMatrix[0].length;\n\n        let rowIdxOk = rowIndex >= 0 && rowIndex < rowsSize;\n        let columnIdxOk = columnIndex >= 0 && columnIndex < columnsSize;\n\n        if (rowIdxOk && columnIdxOk) {\n            pieceToMove = this.boardMatrix[rowIndex][columnIndex];\n        }\n\n        return pieceToMove;\n    }\n\n    updateBoardMatrix(pieceToUpdate) {\n        let emptyRowIndex = this.emptySpace.rowIndex;\n        let emptyColumnIndex = this.emptySpace.columnIndex;\n\n        let pieceRowIndex = pieceToUpdate.rowIndex;\n        let pieceColumnIndex = pieceToUpdate.columnIndex;\n\n        pieceToUpdate.rowIndex = emptyRowIndex;\n        pieceToUpdate.columnIndex = emptyColumnIndex;\n        this.boardMatrix[emptyRowIndex][emptyColumnIndex] = pieceToUpdate;\n        pieceToUpdate.updateCanvasPosition();\n\n        this.emptySpace.rowIndex = pieceRowIndex;\n        this.emptySpace.columnIndex = pieceColumnIndex;\n        this.boardMatrix[pieceRowIndex][pieceColumnIndex] = this.emptySpace;\n        this.emptySpace.updateCanvasPosition();\n\n        this.isMoving = false;\n    }\n\n} \n\nconst emptyBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n];\n\nconst templateBoard = [\n    [1, 2, 8, 5],\n    [9, 7, 13, 12],\n    [15, 14, 6, 11],\n    [3, 0, 10, 4]\n];\n","export default class InputHandler {\n\n    constructor(game) {\n        document.addEventListener(\"keydown\", event => {\n            switch (event.keyCode) {\n                case 37:\n                    // left arrow\n                    game.board.moveLeft(); \n                    break;\n\n                case 39:\n                    // right arrow\n                    game.board.moveRight(); \n                    break;\n\n                case 38:\n                    // up arrow\n                    game.board.moveUp();\n                    break;\n\n                case 40:\n                    // down arrow\n                    game.board.moveDown();\n                    break;\n\n                default:\n                    console.log(event.keyCode);\n            }\n\n        });\n    }\n\n}","import Board from \"/src/board\";\nimport InputHandler from \"/src/input\"\n\nexport default class Game {\n\n    constructor() {\n        this.board = new Board(this);\n\n        new InputHandler(this);\n    }\n\n    draw(ctx) {\n        this.board.draw(ctx);\n    }\n\n    update(deltaTime) {\n        this.board.update(deltaTime);\n    }\n}","import Game from \"/src/game\";\n\n\nlet canvas = document.getElementById(\"gameScreen\");\n\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = canvas.width;\nconst GAME_HEIGHT = canvas.height;\n\nlet game = new Game();\n\n\nlet lastTime = 0;\n\nfunction gameLoop(timestamp) {\n    let deltaTime = timestamp - lastTime;\n    lastTime = timestamp;\n\n    // clearRect faz com que ao se redesenhar um novo rect na tela, os anteriores do mesmo sejam limpos da tela\n    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n\n    // game.update(deltaTime);\n    game.draw(ctx);\n    game.update(deltaTime);\n\n    requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);"]}