{"version":3,"sources":["src/piece.js","src/board.js","src/input.js","src/game.js","src/index.js"],"names":["Piece","game","value","width","height","rowIndex","columnIndex","position","updateCanvasPosition","speed","maxSpeed","isMovingX","isMovingY","x","y","ctx","isEmpty","fillStyle","fillRect","font","textAlign","textBaseline","fillText","_moveHorizontally","_moveVertically","deltaTime","hasArrived","emptySpace","board","_stopMoving","updateBoard","Board","boardSpaces","piecesList","boardMatrix","moves","rowEmptyPiece","columnEmptyPiece","isMoving","emptyBoard","forEach","row","pieceValue","push","templateBoard","piecesRow","piece","Array","from","space","draw","update","newEmptySpaceColumn","pieceToMove","_getPieceToMoveBy","moveLeft","moveRight","rowIdxPieceToMove","moveUp","moveDown","rowsSize","length","columnsSize","pieceToUpdate","updateBoardMatrix","evaluateGame","emptyRowIndex","emptyColumnIndex","pieceRowIndex","pieceColumnIndex","isWinnerBoard","console","log","currentBoard","winnerBoard","rowsLength","columnsLength","rowIdx","colIdx","currentPiece","valueWinnerPiece","InputHandler","document","addEventListener","event","keyCode","Game","canvas","getElementById","getContext","GAME_WIDTH","GAME_HEIGHT","lastTime","gameLoop","timestamp","clearRect","requestAnimationFrame"],"mappings":"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","file":"src.e02889cb.js","sourceRoot":"..","sourcesContent":["export default class Piece {\n\n    constructor(game, value, width, height, rowIndex, columnIndex) {\n        this.game = game;\n        this.value = value;\n        this.width = width;\n        this.height = height;\n\n        // Piece`s position on board\n        this.rowIndex = rowIndex;\n        this.columnIndex = columnIndex;\n\n        this.position = null;\n        this.updateCanvasPosition();\n\n        // To move piece\n        this.speed = 0;\n        this.maxSpeed = 10;\n\n        this.isMovingX = false;\n        this.isMovingY = false;\n    }\n\n    updateCanvasPosition() {\n        this.position = {\n            x: 10 + (this.columnIndex * this.width + (10 * this.columnIndex)), \n            y: 10 + (this.rowIndex * this.height + (10 * this.rowIndex))\n        };\n    }\n\n    draw(ctx) {\n        let isEmpty = this.value === 0;\n\n        ctx.fillStyle = \"rgba(38, 79, 114)\";\n        if (isEmpty) {\n            ctx.fillStyle = \"rgba(38, 79, 114, 0.4)\";\n        }\n        ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n\n        if (!isEmpty) {\n            ctx.font = \"40px Arial\";\n            ctx.fillStyle = \"white\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n\n            let x = this.position.x + (this.width / 2);\n            let y = this.position.y + (this.height / 2);\n            ctx.fillText(this.value, x, y);\n        }   \n    }\n\n    moveLeft() {\n        this._moveHorizontally();\n        this.speed = -this.maxSpeed;\n    }\n\n    moveRight() {\n        this._moveHorizontally();\n        this.speed = this.maxSpeed;\n    }\n\n    _moveHorizontally() {\n        this.isMovingX = true;\n        this.isMovingY = false; \n    }\n\n    moveDown() {\n        this._moveVertically();\n        this.speed = this.maxSpeed;\n    }\n\n    moveUp() {\n        this._moveVertically();\n        this.speed = -this.maxSpeed;\n    }\n\n    _moveVertically() {\n        this.isMovingX = false;\n        this.isMovingY = true; \n    }\n\n    _stopMoving() {\n        this.isMovingX = false;\n        this.isMovingY = false;\n        this.speed = 0;\n    }\n\n    update(deltaTime) {\n\n        let hasArrived = false;\n\n        if (this.isMovingX) {\n            let emptySpace = this.game.board.emptySpace;\n\n            this.position.x = this.position.x + this.speed;\n\n            if (this.speed > 0) {\n                hasArrived = this.position.x >= emptySpace.position.x;\n            } else if (this.speed < 0) {\n                hasArrived = this.position.x <= emptySpace.position.x;\n            }\n\n        } else if (this.isMovingY) {\n            let emptySpace = this.game.board.emptySpace;\n\n            this.position.y = this.position.y + this.speed;\n\n            if (this.speed > 0) {\n                hasArrived = this.position.y >= emptySpace.position.y;\n            } else if (this.speed < 0) {\n                hasArrived = this.position.y <= emptySpace.position.y;\n            }\n        }\n\n        if (hasArrived) {\n            this._stopMoving();\n            this.game.board.updateBoard(this);\n        }\n    }\n}","import Piece from \"/src/piece\";\n\nexport default class Board {\n\n    constructor(game) {\n        this.boardSpaces = []\n        this.piecesList = [];\n\n        let pieceWidth = 80;\n        let pieceHeight = 80;\n\n        this.boardMatrix = [];\n        this.moves = 0;\n\n        this.rowEmptyPiece = null;\n        this.columnEmptyPiece = null;\n\n        this.emptySpace = null;\n\n        this.isMoving = false;\n\n        emptyBoard.forEach((row, rowIndex) => {\n            row.forEach((pieceValue, columnIndex) => {\n                this.boardSpaces.push(new Piece(game, pieceValue, pieceWidth, pieceHeight, rowIndex, columnIndex));\n            });\n        });\n\n        templateBoard.forEach((row, rowIndex) => {\n\n            let piecesRow = []\n\n            row.forEach((pieceValue, columnIndex) => {\n                let piece = new Piece(game, pieceValue, pieceWidth, pieceHeight, rowIndex, columnIndex);\n                this.piecesList.push(piece);\n                piecesRow.push(piece);\n\n                if (pieceValue === 0) {\n                    this.emptySpace = piece;\n                }\n            });\n\n            this.boardMatrix.push(Array.from(piecesRow));\n        });\n    }\n\n    draw(ctx) {\n        this.boardSpaces.forEach(space => {\n            space.draw(ctx);\n        });\n\n        this.piecesList.forEach(piece => {\n            piece.draw(ctx);\n        });\n    }\n\n    update(deltaTime) {\n        this.piecesList.forEach(piece => piece.update(deltaTime));\n    }\n\n    moveLeft() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let newEmptySpaceColumn = this.emptySpace.columnIndex + 1;\n            let pieceToMove = this._getPieceToMoveBy(this.emptySpace.rowIndex, newEmptySpaceColumn);\n\n            if (pieceToMove) {\n                pieceToMove.moveLeft();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveRight() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let newEmptySpaceColumn = this.emptySpace.columnIndex - 1;\n            let pieceToMove = this._getPieceToMoveBy(this.emptySpace.rowIndex, newEmptySpaceColumn);\n\n            if (pieceToMove) {\n                pieceToMove.moveRight();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveUp() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let rowIdxPieceToMove = this.emptySpace.rowIndex + 1;\n            let pieceToMove = this._getPieceToMoveBy(rowIdxPieceToMove, this.emptySpace.columnIndex);\n\n            if (pieceToMove) {\n                pieceToMove.moveUp();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveDown() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let rowIdxPieceToMove = this.emptySpace.rowIndex - 1;\n            let pieceToMove = this._getPieceToMoveBy(rowIdxPieceToMove, this.emptySpace.columnIndex);\n\n            if (pieceToMove) {\n                pieceToMove.moveDown();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    _getPieceToMoveBy(rowIndex, columnIndex) {\n        let pieceToMove = null;\n\n        let rowsSize = this.boardMatrix.length;\n        let columnsSize = this.boardMatrix[0].length;\n\n        let rowIdxOk = rowIndex >= 0 && rowIndex < rowsSize;\n        let columnIdxOk = columnIndex >= 0 && columnIndex < columnsSize;\n\n        if (rowIdxOk && columnIdxOk) {\n            pieceToMove = this.boardMatrix[rowIndex][columnIndex];\n        }\n\n        return pieceToMove;\n    }\n\n    updateBoard(pieceToUpdate) {\n        this.updateBoardMatrix(pieceToUpdate);\n        this.moves += 1;\n        this.evaluateGame();\n    }\n\n    updateBoardMatrix(pieceToUpdate) {\n        let emptyRowIndex = this.emptySpace.rowIndex;\n        let emptyColumnIndex = this.emptySpace.columnIndex;\n\n        let pieceRowIndex = pieceToUpdate.rowIndex;\n        let pieceColumnIndex = pieceToUpdate.columnIndex;\n\n        pieceToUpdate.rowIndex = emptyRowIndex;\n        pieceToUpdate.columnIndex = emptyColumnIndex;\n        this.boardMatrix[emptyRowIndex][emptyColumnIndex] = pieceToUpdate;\n        pieceToUpdate.updateCanvasPosition();\n\n        this.emptySpace.rowIndex = pieceRowIndex;\n        this.emptySpace.columnIndex = pieceColumnIndex;\n        this.boardMatrix[pieceRowIndex][pieceColumnIndex] = this.emptySpace;\n        this.emptySpace.updateCanvasPosition();\n\n        this.isMoving = false;\n    }\n\n    evaluateGame() {\n        let isWinner = isWinnerBoard(this.boardMatrix);\n\n        if (isWinner) {\n            console.log(\"Venci o jogo\");\n            console.log(\"Jogo ganho com: \", this.moves, \" movimentos\");\n        } else {\n            console.log(\"Ainda não\");\n        }\n    }\n}\n\nfunction isWinnerBoard(currentBoard) {\n\n    if (!currentBoard) {\n        return false;\n    }\n\n    if (currentBoard.length !== winnerBoard.length) {\n        return false;\n    }\n\n    let rowsLength = winnerBoard.length;\n    let columnsLength = winnerBoard[0].length;\n\n    for (let rowIdx = 0; rowIdx < rowsLength; rowIdx++) {\n        for (let colIdx = 0; colIdx < columnsLength; colIdx++) {\n            let currentPiece = currentBoard[rowIdx][colIdx];\n            let valueWinnerPiece = winnerBoard[rowIdx][colIdx];\n\n            if (currentPiece.value !== valueWinnerPiece) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nconst emptyBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n];\n\nconst templateBoard = [\n    [1, 2, 8, 5],\n    [9, 7, 13, 12],\n    [15, 14, 6, 11],\n    [3, 0, 10, 4]\n];\n\nconst winnerBoard = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 0]\n];\n","export default class InputHandler {\n\n    constructor(game) {\n        document.addEventListener(\"keydown\", event => {\n            switch (event.keyCode) {\n                case 37:\n                    // left arrow\n                    game.board.moveLeft(); \n                    break;\n\n                case 39:\n                    // right arrow\n                    game.board.moveRight(); \n                    break;\n\n                case 38:\n                    // up arrow\n                    game.board.moveUp();\n                    break;\n\n                case 40:\n                    // down arrow\n                    game.board.moveDown();\n                    break;\n\n                default:\n                    console.log(event.keyCode);\n            }\n\n        });\n    }\n\n}","import Board from \"/src/board\";\nimport InputHandler from \"/src/input\"\n\nexport default class Game {\n\n    constructor() {\n        this.board = new Board(this);\n\n        new InputHandler(this);\n    }\n\n    draw(ctx) {\n        this.board.draw(ctx);\n    }\n\n    update(deltaTime) {\n        this.board.update(deltaTime);\n    }\n}","import Game from \"/src/game\";\n\n\nlet canvas = document.getElementById(\"gameScreen\");\n\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = canvas.width;\nconst GAME_HEIGHT = canvas.height;\n\nlet game = new Game();\n\n\nlet lastTime = 0;\n\nfunction gameLoop(timestamp) {\n    let deltaTime = timestamp - lastTime;\n    lastTime = timestamp;\n\n    // clearRect faz com que ao se redesenhar um novo rect na tela, os anteriores do mesmo sejam limpos da tela\n    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n\n    // game.update(deltaTime);\n    game.draw(ctx);\n    game.update(deltaTime);\n\n    requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);"]}