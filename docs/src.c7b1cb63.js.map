{"version":3,"sources":["src/piece.js","src/board.js","src/input.js","src/game.js","src/scoreboard.js","src/index.js"],"names":["CanvasRenderingContext2D","prototype","roundRect","x","y","width","height","radius","beginPath","moveTo","arcTo","closePath","Piece","game","value","rowIndex","columnIndex","position","updateCanvasPosition","speed","maxSpeed","isMovingX","isMovingY","ctx","emptySpace","isEmptySpace","fillStyle","fill","font","textAlign","textBaseline","fillText","_moveHorizontally","_moveVertically","deltaTime","hasArrived","board","_stopMoving","updateBoard","MOVES","LEFT","UP","DOWN","RIGHT","Board","boardSpaces","piecesList","boardMatrix","rowEmptyPiece","columnEmptyPiece","isMoving","emptyBoard","forEach","row","pieceValue","push","solvedBoard","piecesRow","piece","Array","from","shuffleFromSolvedGame","space","draw","update","plays","amountMoves","min","max","move","Math","trunc","random","_movePieceOn","pieceToMove","_getPieceToMoveFromEmptySpace","updateBoardMatrix","rowIdxPieceToMove","colIdxPieceToMove","_getPieceToMoveBy","moveLeft","moveRight","moveUp","moveDown","rowsSize","length","columnsSize","pieceToUpdate","updateMoves","evaluateGame","increaseMoves","emptyRowIndex","emptyColumnIndex","pieceRowIndex","pieceColumnIndex","isWinnerBoard","win","currentBoard","rowsLength","columnsLength","rowIdx","colIdx","currentPiece","valueWinnerPiece","generateBoardGame","rows","columns","piecesValues","keys","boardGame","values","randomIdx","splice","InputHandler","document","addEventListener","event","keyCode","start","console","log","GAMESTATE","MENU","RUNNING","FINISHED","Game","gameWidth","gameHeight","gameState","moves","_drawMenuGame","_drawRunningGame","_drawMenuWinnerGame","rect","movesToWin","Scoreboard","canvas","getElementById","getContext","scoreboardCanvas","scoreboardCtx","GAME_WIDTH","GAME_HEIGHT","SCOREBOARD_WIDTH","SCOREBOARD_HEIGHT","scoreboard","lastTime","gameLoop","timestamp","clearRect","requestAnimationFrame"],"mappings":"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","file":"src.c7b1cb63.js","sourceRoot":"..","sourcesContent":["CanvasRenderingContext2D.prototype.roundRect = function (x, y, width, height, radius) {\n    if (width < 2 * radius) radius = width / 2;\n    if (height < 2 * radius) radius = height / 2;\n    this.beginPath();\n    this.moveTo(x + radius, y);\n    this.arcTo(x + width, y, x + width, y + height, radius);\n    this.arcTo(x + width, y + height, x, y + height, radius);\n    this.arcTo(x, y + height, x, y, radius);\n    this.arcTo(x, y, x + width, y, radius);\n    this.closePath();\n    return this;\n  }\n\nexport default class Piece {\n\n    constructor(game, value, width, height, rowIndex, columnIndex) {\n        this.game = game;\n        this.value = value;\n        this.width = width;\n        this.height = height;\n\n        // Piece`s position on board\n        this.rowIndex = rowIndex;\n        this.columnIndex = columnIndex;\n\n        this.position = null;\n        this.updateCanvasPosition();\n\n        // To move piece\n        this.speed = 0;\n        this.maxSpeed = 10;\n\n        this.isMovingX = false;\n        this.isMovingY = false;\n    }\n\n    updateCanvasPosition() {\n        this.position = {\n            x: 10 + (this.columnIndex * this.width + (10 * this.columnIndex)), \n            y: 10 + (this.rowIndex * this.height + (10 * this.rowIndex))\n        };\n    }\n\n    draw(ctx, emptySpace) {\n        let isEmptySpace = emptySpace === 'undefined' ? false : emptySpace\n\n        if (isEmptySpace) {\n            ctx.roundRect(this.position.x, this.position.y, this.width, this.height, 12);\n            // ctx.fillStyle = \"rgba(255, 163, 114, 1)\";\n            ctx.fillStyle = \"#f1f3f4\";\n            ctx.fill();\n            return;\n        }\n\n        let isZero = this.value === 0;\n        if (!isZero) {\n            ctx.roundRect(this.position.x, this.position.y, this.width, this.height, 10);\n            ctx.fillStyle = \"#79bac1\";\n            ctx.fill();\n\n            ctx.font = \"45px monospace\";\n            ctx.fillStyle = \"#512b58\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n\n            let x = this.position.x + (this.width / 2);\n            let y = this.position.y + (this.height * 0.50);\n            ctx.fillText(this.value, x, y);\n        }   \n    }\n\n    moveLeft() {\n        this._moveHorizontally();\n        this.speed = -this.maxSpeed;\n    }\n\n    moveRight() {\n        this._moveHorizontally();\n        this.speed = this.maxSpeed;\n    }\n\n    _moveHorizontally() {\n        this.isMovingX = true;\n        this.isMovingY = false; \n    }\n\n    moveDown() {\n        this._moveVertically();\n        this.speed = this.maxSpeed;\n    }\n\n    moveUp() {\n        this._moveVertically();\n        this.speed = -this.maxSpeed;\n    }\n\n    _moveVertically() {\n        this.isMovingX = false;\n        this.isMovingY = true; \n    }\n\n    _stopMoving() {\n        this.isMovingX = false;\n        this.isMovingY = false;\n        this.speed = 0;\n    }\n\n    update(deltaTime) {\n\n        let hasArrived = false;\n\n        if (this.isMovingX) {\n            let emptySpace = this.game.board.emptySpace;\n\n            this.position.x = this.position.x + this.speed;\n\n            if (this.speed > 0) {\n                hasArrived = this.position.x >= emptySpace.position.x;\n            } else if (this.speed < 0) {\n                hasArrived = this.position.x <= emptySpace.position.x;\n            }\n\n        } else if (this.isMovingY) {\n            let emptySpace = this.game.board.emptySpace;\n\n            this.position.y = this.position.y + this.speed;\n\n            if (this.speed > 0) {\n                hasArrived = this.position.y >= emptySpace.position.y;\n            } else if (this.speed < 0) {\n                hasArrived = this.position.y <= emptySpace.position.y;\n            }\n        }\n\n        if (hasArrived) {\n            this._stopMoving();\n            this.game.board.updateBoard(this);\n        }\n    }\n}","import Piece from \"/src/piece\";\n\n\nconst MOVES = {\n    LEFT: 0,\n    UP: 1,\n    DOWN: 2,\n    RIGHT: 3\n};\n\nexport default class Board {\n\n    constructor(game) {\n        this.game = game;\n        this.boardSpaces = []\n        this.piecesList = [];\n\n        let pieceWidth = 80;\n        let pieceHeight = 80;\n\n        this.boardMatrix = [];\n\n        this.rowEmptyPiece = null;\n        this.columnEmptyPiece = null;\n\n        this.emptySpace = null;\n\n        this.isMoving = false;\n\n        emptyBoard.forEach((row, rowIndex) => {\n            row.forEach((pieceValue, columnIndex) => {\n                this.boardSpaces.push(new Piece(game, pieceValue, pieceWidth, pieceHeight, rowIndex, columnIndex));\n            });\n        });\n\n        solvedBoard.forEach((row, rowIndex) => {\n\n            let piecesRow = []\n\n            row.forEach((pieceValue, columnIndex) => {\n                let piece = new Piece(game, pieceValue, pieceWidth, pieceHeight, rowIndex, columnIndex);\n                this.piecesList.push(piece);\n                piecesRow.push(piece);\n\n                if (pieceValue === 0) {\n                    this.emptySpace = piece;\n                }\n            });\n\n            this.boardMatrix.push(Array.from(piecesRow));\n        });\n\n        this.shuffleFromSolvedGame(1500);\n    }\n\n    draw(ctx) {\n        this.boardSpaces.forEach(space => {\n            space.draw(ctx, true);\n        });\n\n        this.piecesList.forEach(piece => {\n            piece.draw(ctx);\n        });\n    }\n\n    update(deltaTime) {\n        this.piecesList.forEach(piece => piece.update(deltaTime));\n    }\n\n    shuffleFromSolvedGame(plays) {\n        let min = 0;\n        let max = MOVES.RIGHT + 1;\n        let amountMoves = 0;\n\n        while (amountMoves < plays) {\n            var move = Math.trunc(Math.random() * (+max - +min) + min);\n\n            if (this._movePieceOn(move)) {\n                amountMoves += 1;\n            }\n        }\n    }\n\n    _movePieceOn(move) {\n        let pieceToMove = this._getPieceToMoveFromEmptySpace(move);\n        if (pieceToMove) {\n            this.updateBoardMatrix(pieceToMove);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    _getPieceToMoveFromEmptySpace(move) {\n        let rowIdxPieceToMove = this.emptySpace.rowIndex;\n        let colIdxPieceToMove = this.emptySpace.columnIndex;\n\n        switch (move) {\n            case MOVES.RIGHT:\n                colIdxPieceToMove = this.emptySpace.columnIndex - 1;\n                break;\n            case MOVES.LEFT:\n                colIdxPieceToMove = this.emptySpace.columnIndex + 1;\n                break;\n            case MOVES.DOWN:\n                rowIdxPieceToMove = this.emptySpace.rowIndex - 1;\n                break;\n            case MOVES.UP:\n                rowIdxPieceToMove = this.emptySpace.rowIndex + 1;\n                break;\n        }\n\n        return this._getPieceToMoveBy(rowIdxPieceToMove, colIdxPieceToMove);\n    }\n\n    moveLeft() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let pieceToMove = this._getPieceToMoveFromEmptySpace(MOVES.LEFT);\n\n            if (pieceToMove) {\n                pieceToMove.moveLeft();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveRight() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let pieceToMove = this._getPieceToMoveFromEmptySpace(MOVES.RIGHT);\n\n            if (pieceToMove) {\n                pieceToMove.moveRight();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveUp() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let pieceToMove = this._getPieceToMoveFromEmptySpace(MOVES.UP);\n\n            if (pieceToMove) {\n                pieceToMove.moveUp();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveDown() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let pieceToMove = this._getPieceToMoveFromEmptySpace(MOVES.DOWN);\n\n            if (pieceToMove) {\n                pieceToMove.moveDown();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    _getPieceToMoveBy(rowIndex, columnIndex) {\n        let pieceToMove = null;\n\n        let rowsSize = this.boardMatrix.length;\n        let columnsSize = this.boardMatrix[0].length;\n\n        let rowIdxOk = rowIndex >= 0 && rowIndex < rowsSize;\n        let columnIdxOk = columnIndex >= 0 && columnIndex < columnsSize;\n\n        if (rowIdxOk && columnIdxOk) {\n            pieceToMove = this.boardMatrix[rowIndex][columnIndex];\n        }\n\n        return pieceToMove;\n    }\n\n    updateBoard(pieceToUpdate) {\n        this.updateBoardMatrix(pieceToUpdate);\n        this.updateMoves();\n        this.evaluateGame();\n    }\n\n    updateMoves() {\n        this.game.increaseMoves();\n    }\n\n    updateBoardMatrix(pieceToUpdate) {\n        let emptyRowIndex = this.emptySpace.rowIndex;\n        let emptyColumnIndex = this.emptySpace.columnIndex;\n\n        let pieceRowIndex = pieceToUpdate.rowIndex;\n        let pieceColumnIndex = pieceToUpdate.columnIndex;\n\n        pieceToUpdate.rowIndex = emptyRowIndex;\n        pieceToUpdate.columnIndex = emptyColumnIndex;\n        this.boardMatrix[emptyRowIndex][emptyColumnIndex] = pieceToUpdate;\n        pieceToUpdate.updateCanvasPosition();\n\n        this.emptySpace.rowIndex = pieceRowIndex;\n        this.emptySpace.columnIndex = pieceColumnIndex;\n        this.boardMatrix[pieceRowIndex][pieceColumnIndex] = this.emptySpace;\n        this.emptySpace.updateCanvasPosition();\n\n        this.isMoving = false;\n    }\n\n    evaluateGame() {\n        let isWinner = isWinnerBoard(this.boardMatrix);\n\n        if (isWinner) {\n            this.game.win();\n        }\n    }\n}\n\nfunction isWinnerBoard(currentBoard) {\n\n    if (!currentBoard) {\n        return false;\n    }\n\n    if (currentBoard.length !== solvedBoard.length) {\n        return false;\n    }\n\n    let rowsLength = solvedBoard.length;\n    let columnsLength = solvedBoard[0].length;\n\n    for (let rowIdx = 0; rowIdx < rowsLength; rowIdx++) {\n        for (let colIdx = 0; colIdx < columnsLength; colIdx++) {\n            let currentPiece = currentBoard[rowIdx][colIdx];\n            let valueWinnerPiece = solvedBoard[rowIdx][colIdx];\n\n            if (currentPiece.value !== valueWinnerPiece) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction generateBoardGame(rows, columns) {\n    let piecesValues = Array.from(Array(rows * columns).keys());\n    let  boardGame = [];\n\n    let min = 0;\n    for (let rowIdx = 0; rowIdx < rows; rowIdx++) {\n        let values = [];\n        for (let colIdx = 0; colIdx < columns; colIdx++) {\n            let max = piecesValues.length;\n            var randomIdx = Math.random() * (+max - +min) + min;\n            let value = piecesValues.splice(randomIdx, 1)[0];\n\n            values.push(value);\n        }\n        boardGame.push(values);\n    }\n    return boardGame;\n}\n\nconst emptyBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n];\n\nconst solvedBoard = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 0]\n];\n","export default class InputHandler {\n\n    constructor(game) {\n        document.addEventListener(\"keydown\", event => {\n            switch (event.keyCode) {\n                case 32:\n                    // SPACEBAR\n                    game.start();\n                    break;\n\n                case 37:\n                    // left arrow\n                    game.board.moveLeft(); \n                    break;\n\n                case 39:\n                    // right arrow\n                    game.board.moveRight(); \n                    break;\n\n                case 38:\n                    // up arrow\n                    game.board.moveUp();\n                    break;\n\n                case 40:\n                    // down arrow\n                    game.board.moveDown();\n                    break;\n\n                default:\n                    console.log(event.keyCode);\n            }\n\n        });\n    }\n\n}","import Board from \"/src/board\";\nimport InputHandler from \"/src/input\"\n\nconst GAMESTATE = {\n    MENU: 0,\n    RUNNING: 1,\n    FINISHED: 2\n};\n\nexport default class Game {\n\n    constructor(gameWidth, gameHeight) {\n        this.board = null;\n        this.gameWidth = gameWidth;\n        this.gameHeight = gameHeight;\n        this.gameState = GAMESTATE.MENU;\n        this.moves = 0;\n\n        new InputHandler(this);\n    }\n\n    start() {\n        if (this.gameState !== GAMESTATE.MENU && this.gameState !== GAMESTATE.FINISHED) {\n            return;\n        }\n\n        this.gameState = GAMESTATE.RUNNING;\n        this.board = new Board(this);\n        this.moves = 0;\n    }\n\n    increaseMoves() {\n        this.moves += 1;\n    }\n\n    win() {\n        if (this.gameState !== GAMESTATE.RUNNING) {\n            return;\n        }\n        this.gameState = GAMESTATE.FINISHED;\n    }\n\n    draw(ctx) {\n        if (this.gameState === GAMESTATE.MENU) {\n            this._drawMenuGame(ctx);\n        } else if (this.gameState === GAMESTATE.RUNNING) {\n            this._drawRunningGame(ctx);\n        } else if (this.gameState === GAMESTATE.FINISHED) {\n            this._drawMenuWinnerGame(ctx);\n        }\n    }\n\n    _drawRunningGame(ctx) {\n        this.board.draw(ctx);\n    }\n\n    _drawMenuGame(ctx) {\n        ctx.rect(0, 0, this.gameWidth, this.gameHeight);\n        ctx.fillStyle = \"rgba(27, 38, 44, 1)\";\n        ctx.fill();\n\n        ctx.font = \"30px Arial\";\n        ctx.fillStyle = \"white\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\n            \"Press SPACEBAR To Start\",\n            this.gameWidth / 2,\n            this.gameHeight / 2\n        );\n    }\n\n    _drawMenuWinnerGame(ctx) {\n        ctx.rect(0, 0, this.gameWidth, this.gameHeight);\n        ctx.fillStyle = \"rgba(27, 38, 44, 1)\";\n        ctx.fill();\n\n        ctx.font = \"60px Arial\";\n        ctx.fillStyle = \"gold\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\n            \"You Win!\",\n            this.gameWidth / 2,\n            this.gameHeight / 2\n        );\n\n        ctx.font = \"16px Arial\";\n        ctx.fillStyle = \"white\";\n\n        let movesToWin = this.moves;\n\n        ctx.fillText(\n            \"Moves .................................... \" + movesToWin,\n            this.gameWidth - (this.gameWidth / 2),\n            this.gameHeight - (this.gameHeight / 4)\n        );\n\n        ctx.font = \"12px Arial\";\n        ctx.fillStyle = \"lime\";\n        ctx.fillText(\n            \"(Press SPACEBAR to play again)\",\n            this.gameWidth - (this.gameWidth / 2),\n            this.gameHeight - (this.gameHeight / 8)\n        );\n    }\n\n    update(deltaTime) {\n        if (this.gameState === GAMESTATE.RUNNING) {\n            this.board.update(deltaTime);\n        }\n    }\n}","export default class Scoreboard {\n\n    constructor(game, width, height) {\n        this.game = game;\n        this.width = width;\n        this.height = height;\n    }\n\n    draw(ctx) {\n        ctx.font = \"15px monospace\";\n        ctx.textAlign = \"center\";\n        ctx.fillStyle = \"#f1f3f4\";\n        ctx.fillText(\n            \"MOVES\",\n            this.width / 2,\n            this.height * 0.25 \n        );\n\n        ctx.font = \"40px monospace\";\n        ctx.fillStyle = \"#512b58\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\n            this.game.moves,\n            this.width / 2,\n            this.height / 1.2\n        );\n    }\n\n}","import Game from \"/src/game\";\nimport Scoreboard from \"./scoreboard\";\n\n\nlet canvas = document.getElementById(\"gameScreen\");\nlet ctx = canvas.getContext(\"2d\");\n\nlet scoreboardCanvas = document.getElementById(\"scoreboard\");\nlet scoreboardCtx = scoreboardCanvas.getContext(\"2d\");\n\nconst GAME_WIDTH = canvas.width;\nconst GAME_HEIGHT = canvas.height;\n\nconst SCOREBOARD_WIDTH = scoreboardCanvas.width;\nconst SCOREBOARD_HEIGHT = scoreboardCanvas.height;\n\nlet game = new Game(GAME_WIDTH, GAME_HEIGHT);\nlet scoreboard = new Scoreboard(game, SCOREBOARD_WIDTH, SCOREBOARD_HEIGHT);\n\nlet lastTime = 0;\n\nfunction gameLoop(timestamp) {\n    let deltaTime = timestamp - lastTime;\n    lastTime = timestamp;\n\n    // clearRect faz com que ao se redesenhar um novo rect na tela, os anteriores do mesmo sejam limpos da tela\n    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n\n    // game.update(deltaTime);\n    game.draw(ctx);\n    game.update(deltaTime);\n\n    scoreboardCtx.clearRect(0, 0, SCOREBOARD_WIDTH, SCOREBOARD_HEIGHT);\n    scoreboard.draw(scoreboardCtx);\n\n    requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);"]}