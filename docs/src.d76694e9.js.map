{"version":3,"sources":["src/piece.js","src/board.js","src/input.js","src/game.js","src/index.js"],"names":["CanvasRenderingContext2D","prototype","roundRect","x","y","width","height","radius","beginPath","moveTo","arcTo","closePath","Piece","game","value","rowIndex","columnIndex","position","updateCanvasPosition","speed","maxSpeed","isMovingX","isMovingY","ctx","emptySpace","isEmptySpace","fillStyle","fill","font","textAlign","textBaseline","fillText","_moveHorizontally","_moveVertically","deltaTime","hasArrived","board","_stopMoving","updateBoard","MOVES","LEFT","UP","DOWN","RIGHT","Board","boardSpaces","piecesList","boardMatrix","moves","rowEmptyPiece","columnEmptyPiece","isMoving","emptyBoard","forEach","row","pieceValue","push","solvedBoard","piecesRow","piece","Array","from","shuffleFromSolvedGame","space","draw","update","plays","amountMoves","min","max","move","Math","trunc","random","_movePieceOn","pieceToMove","_getPieceToMoveFromEmptySpace","updateBoardMatrix","rowIdxPieceToMove","colIdxPieceToMove","_getPieceToMoveBy","newEmptySpaceColumn","moveLeft","moveRight","moveUp","moveDown","rowsSize","length","columnsSize","pieceToUpdate","updateMoves","evaluateGame","emptyRowIndex","emptyColumnIndex","pieceRowIndex","pieceColumnIndex","isWinnerBoard","win","currentBoard","winnerBoard","rowsLength","columnsLength","rowIdx","colIdx","currentPiece","valueWinnerPiece","generateBoardGame","rows","columns","piecesValues","keys","boardGame","values","randomIdx","splice","InputHandler","document","addEventListener","event","keyCode","start","console","log","GAMESTATE","MENU","RUNNING","FINISHED","Game","gameWidth","gameHeight","gameState","_drawMenuGame","_drawRunningGame","_drawMenuWinnerGame","rect","movesToWin","canvas","getElementById","getContext","GAME_WIDTH","GAME_HEIGHT","lastTime","gameLoop","timestamp","clearRect","requestAnimationFrame"],"mappings":";AAyIK,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzILA,yBAAyBC,UAAUC,UAAY,SAAUC,EAAGC,EAAGC,EAAOC,EAAQC,GAUnE,OATHF,EAAQ,EAAIE,IAAQA,EAASF,EAAQ,GACrCC,EAAS,EAAIC,IAAQA,EAASD,EAAS,GACtCE,KAAAA,YACAC,KAAAA,OAAON,EAAII,EAAQH,GACnBM,KAAAA,MAAMP,EAAIE,EAAOD,EAAGD,EAAIE,EAAOD,EAAIE,EAAQC,GAC3CG,KAAAA,MAAMP,EAAIE,EAAOD,EAAIE,EAAQH,EAAGC,EAAIE,EAAQC,GAC5CG,KAAAA,MAAMP,EAAGC,EAAIE,EAAQH,EAAGC,EAAGG,GAC3BG,KAAAA,MAAMP,EAAGC,EAAGD,EAAIE,EAAOD,EAAGG,GAC1BI,KAAAA,YACE,MAGUC,IAAAA,EAAAA,WAELC,SAAAA,EAAAA,EAAMC,EAAOT,EAAOC,EAAQS,EAAUC,GAAa,EAAA,KAAA,GACtDH,KAAAA,KAAOA,EACPC,KAAAA,MAAQA,EACRT,KAAAA,MAAQA,EACRC,KAAAA,OAASA,EAGTS,KAAAA,SAAWA,EACXC,KAAAA,YAAcA,EAEdC,KAAAA,SAAW,KACXC,KAAAA,uBAGAC,KAAAA,MAAQ,EACRC,KAAAA,SAAW,GAEXC,KAAAA,WAAY,EACZC,KAAAA,WAAY,EAwGpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,uBArGsB,MAAA,WACdL,KAAAA,SAAW,CACZd,EAAS,KAAKa,YAAc,KAAKX,MAAS,GAAK,KAAKW,YAAjD,GACHZ,EAAS,KAAKW,SAAW,KAAKT,OAAU,GAAK,KAAKS,SAA/C,MAkGV,CAAA,IAAA,OA9FIQ,MAAAA,SAAAA,EAAKC,GAGFC,GAF8B,cAAfD,GAAqCA,EAMpD,OAHAD,EAAIrB,UAAU,KAAKe,SAASd,EAAG,KAAKc,SAASb,EAAG,KAAKC,MAAO,KAAKC,OAAQ,IACzEiB,EAAIG,UAAY,8BAChBH,EAAII,OAKJ,KADwB,IAAf,KAAKb,OACL,CACTS,EAAIrB,UAAU,KAAKe,SAASd,EAAG,KAAKc,SAASb,EAAG,KAAKC,MAAO,KAAKC,OAAQ,IACzEiB,EAAIG,UAAY,uBAChBH,EAAII,OAEJJ,EAAIK,KAAO,aACXL,EAAIG,UAAY,wBAChBH,EAAIM,UAAY,SAChBN,EAAIO,aAAe,SAEf3B,IAAAA,EAAI,KAAKc,SAASd,EAAK,KAAKE,MAAQ,EACpCD,EAAI,KAAKa,SAASb,EAAK,KAAKE,OAAS,EACzCiB,EAAIQ,SAAS,KAAKjB,MAAOX,EAAGC,MAuEnC,CAAA,IAAA,WAnEU,MAAA,WACF4B,KAAAA,oBACAb,KAAAA,OAAS,KAAKC,WAiEtB,CAAA,IAAA,YA9DW,MAAA,WACHY,KAAAA,oBACAb,KAAAA,MAAQ,KAAKC,WA4DrB,CAAA,IAAA,oBAzDmB,MAAA,WACXC,KAAAA,WAAY,EACZC,KAAAA,WAAY,IAuDpB,CAAA,IAAA,WApDU,MAAA,WACFW,KAAAA,kBACAd,KAAAA,MAAQ,KAAKC,WAkDrB,CAAA,IAAA,SA/CQ,MAAA,WACAa,KAAAA,kBACAd,KAAAA,OAAS,KAAKC,WA6CtB,CAAA,IAAA,kBA1CiB,MAAA,WACTC,KAAAA,WAAY,EACZC,KAAAA,WAAY,IAwCpB,CAAA,IAAA,cArCa,MAAA,WACLD,KAAAA,WAAY,EACZC,KAAAA,WAAY,EACZH,KAAAA,MAAQ,IAkChB,CAAA,IAAA,SA/BMe,MAAAA,SAAAA,GAECC,IAAAA,GAAa,EAEb,GAAA,KAAKd,UAAW,CACZG,IAAAA,EAAa,KAAKX,KAAKuB,MAAMZ,WAE5BP,KAAAA,SAASd,EAAI,KAAKc,SAASd,EAAI,KAAKgB,MAErC,KAAKA,MAAQ,EACbgB,EAAa,KAAKlB,SAASd,GAAKqB,EAAWP,SAASd,EAC7C,KAAKgB,MAAQ,IACpBgB,EAAa,KAAKlB,SAASd,GAAKqB,EAAWP,SAASd,QAGrD,GAAI,KAAKmB,UAAW,CACnBE,IAAAA,EAAa,KAAKX,KAAKuB,MAAMZ,WAE5BP,KAAAA,SAASb,EAAI,KAAKa,SAASb,EAAI,KAAKe,MAErC,KAAKA,MAAQ,EACbgB,EAAa,KAAKlB,SAASb,GAAKoB,EAAWP,SAASb,EAC7C,KAAKe,MAAQ,IACpBgB,EAAa,KAAKlB,SAASb,GAAKoB,EAAWP,SAASb,GAIxD+B,IACKE,KAAAA,cACAxB,KAAAA,KAAKuB,MAAME,YAAY,WAEnC,EA5HgB1B,GA4HhB,QAAA,QAAA;;ACyJL,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAlSA,IAAA,EAAA,EAAA,QAAA,eAkSA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA/RA,IAAM2B,EAAQ,CACVC,KAAM,EACNC,GAAI,EACJC,KAAM,EACNC,MAAO,GAGUC,EAAAA,WAEL/B,SAAAA,EAAAA,GAAM,IAAA,EAAA,KAAA,EAAA,KAAA,GACTA,KAAAA,KAAOA,EACPgC,KAAAA,YAAc,GACdC,KAAAA,WAAa,GAKbC,KAAAA,YAAc,GACdC,KAAAA,MAAQ,EAERC,KAAAA,cAAgB,KAChBC,KAAAA,iBAAmB,KAEnB1B,KAAAA,WAAa,KAEb2B,KAAAA,UAAW,EAEhBC,EAAWC,QAAQ,SAACC,EAAKvC,GACrBuC,EAAID,QAAQ,SAACE,EAAYvC,GACrB,EAAK6B,YAAYW,KAAK,IAAI5C,EAAJ,QAAUC,EAAM0C,EAf7B,GACC,GAciExC,EAAUC,QAI7FyC,EAAYJ,QAAQ,SAACC,EAAKvC,GAElB2C,IAAAA,EAAY,GAEhBJ,EAAID,QAAQ,SAACE,EAAYvC,GACjB2C,IAAAA,EAAQ,IAAI/C,EAAJ,QAAUC,EAAM0C,EAxBnB,GACC,GAuBuDxC,EAAUC,GAC3E,EAAK8B,WAAWU,KAAKG,GACrBD,EAAUF,KAAKG,GAEI,IAAfJ,IACA,EAAK/B,WAAamC,KAI1B,EAAKZ,YAAYS,KAAKI,MAAMC,KAAKH,MAGhCI,KAAAA,sBAAsB,MA6OnC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OA1OSvC,MAAAA,SAAAA,GACIsB,KAAAA,YAAYQ,QAAQ,SAAAU,GACrBA,EAAMC,KAAKzC,GAAK,KAGfuB,KAAAA,WAAWO,QAAQ,SAAAM,GACpBA,EAAMK,KAAKzC,OAoOvB,CAAA,IAAA,SAhOWW,MAAAA,SAAAA,GACEY,KAAAA,WAAWO,QAAQ,SAAAM,GAASA,OAAAA,EAAMM,OAAO/B,OA+NtD,CAAA,IAAA,wBA5N0BgC,MAAAA,SAAAA,GAKXC,IAJHC,IACAC,EAAM9B,EAAMI,MAAQ,EACpBwB,EAAc,EAEXA,EAAcD,GAAO,CACpBI,IAAAA,EAAOC,KAAKC,MAAMD,KAAKE,WAAaJ,EAAM,GALxC,GAOF,KAAKK,aAAaJ,KAClBH,GAAe,MAmN/B,CAAA,IAAA,eA9MiBG,MAAAA,SAAAA,GACLK,IAAAA,EAAc,KAAKC,8BAA8BN,GACjDK,QAAAA,IACKE,KAAAA,kBAAkBF,IAChB,KA0MnB,CAAA,IAAA,gCApMkCL,MAAAA,SAAAA,GACtBQ,IAAAA,EAAoB,KAAKtD,WAAWT,SACpCgE,EAAoB,KAAKvD,WAAWR,YAEhCsD,OAAAA,GACC/B,KAAAA,EAAMI,MACPoC,EAAoB,KAAKvD,WAAWR,YAAc,EAClD,MACCuB,KAAAA,EAAMC,KACPuC,EAAoB,KAAKvD,WAAWR,YAAc,EAClD,MACCuB,KAAAA,EAAMG,KACPoC,EAAoB,KAAKtD,WAAWT,SAAW,EAC/C,MACCwB,KAAAA,EAAME,GACPqC,EAAoB,KAAKtD,WAAWT,SAAW,EAIhD,OAAA,KAAKiE,kBAAkBF,EAAmBC,KAiLzD,CAAA,IAAA,WA9Ke,MAAA,WACH,IAAC,KAAK5B,SAAU,CACXA,KAAAA,UAAW,EAEZ8B,IAAAA,EAAsB,KAAKzD,WAAWR,YAAc,EACpD2D,EAAc,KAAKK,kBAAkB,KAAKxD,WAAWT,SAAUkE,GAE/DN,EACAA,EAAYO,WAEP/B,KAAAA,UAAW,KAoKhC,CAAA,IAAA,YA/JgB,MAAA,WACJ,IAAC,KAAKA,SAAU,CACXA,KAAAA,UAAW,EAEZ8B,IAAAA,EAAsB,KAAKzD,WAAWR,YAAc,EACpD2D,EAAc,KAAKK,kBAAkB,KAAKxD,WAAWT,SAAUkE,GAE/DN,EACAA,EAAYQ,YAEPhC,KAAAA,UAAW,KAqJhC,CAAA,IAAA,SAhJa,MAAA,WACD,IAAC,KAAKA,SAAU,CACXA,KAAAA,UAAW,EAEZ2B,IAAAA,EAAoB,KAAKtD,WAAWT,SAAW,EAC/C4D,EAAc,KAAKK,kBAAkBF,EAAmB,KAAKtD,WAAWR,aAExE2D,EACAA,EAAYS,SAEPjC,KAAAA,UAAW,KAsIhC,CAAA,IAAA,WAjIe,MAAA,WACH,IAAC,KAAKA,SAAU,CACXA,KAAAA,UAAW,EAEZ2B,IAAAA,EAAoB,KAAKtD,WAAWT,SAAW,EAC/C4D,EAAc,KAAKK,kBAAkBF,EAAmB,KAAKtD,WAAWR,aAExE2D,EACAA,EAAYU,WAEPlC,KAAAA,UAAW,KAuHhC,CAAA,IAAA,oBAlHsBpC,MAAAA,SAAAA,EAAUC,GACpB2D,IAAAA,EAAc,KAEdW,EAAW,KAAKvC,YAAYwC,OAC5BC,EAAc,KAAKzC,YAAY,GAAGwC,OAS/BZ,OAPQ5D,GAAY,GAAKA,EAAWuE,IACzBtE,GAAe,GAAKA,EAAcwE,KAGhDb,EAAc,KAAK5B,YAAYhC,GAAUC,IAGtC2D,IAqGf,CAAA,IAAA,cAlGgBc,MAAAA,SAAAA,GACHZ,KAAAA,kBAAkBY,GAClBC,KAAAA,cACAC,KAAAA,iBA+Fb,CAAA,IAAA,cA5FkB,MAAA,WACL3C,KAAAA,OAAS,IA2FtB,CAAA,IAAA,oBAxFsByC,MAAAA,SAAAA,GACVG,IAAAA,EAAgB,KAAKpE,WAAWT,SAChC8E,EAAmB,KAAKrE,WAAWR,YAEnC8E,EAAgBL,EAAc1E,SAC9BgF,EAAmBN,EAAczE,YAErCyE,EAAc1E,SAAW6E,EACzBH,EAAczE,YAAc6E,EACvB9C,KAAAA,YAAY6C,GAAeC,GAAoBJ,EACpDA,EAAcvE,uBAETM,KAAAA,WAAWT,SAAW+E,EACtBtE,KAAAA,WAAWR,YAAc+E,EACzBhD,KAAAA,YAAY+C,GAAeC,GAAoB,KAAKvE,WACpDA,KAAAA,WAAWN,uBAEXiC,KAAAA,UAAW,IAuExB,CAAA,IAAA,eApEmB,MAAA,WACI6C,EAAc,KAAKjD,cAGzBlC,KAAAA,KAAKoF,UAgEtB,EAxRqBrD,GA6NrB,SAASoD,EAAcE,GAEf,IAACA,EACM,OAAA,EAGPA,GAAAA,EAAaX,SAAWY,EAAYZ,OAC7B,OAAA,EAMN,IAHDa,IAAAA,EAAaD,EAAYZ,OACzBc,EAAgBF,EAAY,GAAGZ,OAE1Be,EAAS,EAAGA,EAASF,EAAYE,IACjC,IAAA,IAAIC,EAAS,EAAGA,EAASF,EAAeE,IAAU,CAC/CC,IAAAA,EAAeN,EAAaI,GAAQC,GACpCE,EAAmBN,EAAYG,GAAQC,GAEvCC,GAAAA,EAAa1F,QAAU2F,EAChB,OAAA,EAIZ,OAAA,EAGX,SAASC,EAAkBC,EAAMC,GAKxB,IAJDC,IAAAA,EAAejD,MAAMC,KAAKD,MAAM+C,EAAOC,GAASE,QAC/CC,EAAY,GAGRT,EAAS,EAAGA,EAASK,EAAML,IAAU,CAErC,IADDU,IAAAA,EAAS,GACJT,EAAS,EAAGA,EAASK,EAASL,IAAU,CACzClC,IAAAA,EAAMwC,EAAatB,OACnB0B,EAAY1C,KAAKE,WAAaJ,EAAM,GALtC,EAMEvD,EAAQ+F,EAAaK,OAAOD,EAAW,GAAG,GAE9CD,EAAOxD,KAAK1C,GAEhBiG,EAAUvD,KAAKwD,GAEZD,OAAAA,EAiBX,QAAA,QAAA,EAdA,IAAM3D,EAAa,CACf,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGRK,EAAc,CAChB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI,IAGX0C,EAAc,CAChB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,GAAI,GAAI,GAAI;;ACnQZ,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAnCgBgB,IAAAA,EAEjB,SAAYtG,EAAAA,GAAM,EAAA,KAAA,GACduG,SAASC,iBAAiB,UAAW,SAAAC,GACzBA,OAAAA,EAAMC,SACL,KAAA,GAED1G,EAAK2G,QACL,MAEC,KAAA,GAED3G,EAAKuB,MAAM8C,WACX,MAEC,KAAA,GAEDrE,EAAKuB,MAAM+C,YACX,MAEC,KAAA,GAEDtE,EAAKuB,MAAMgD,SACX,MAEC,KAAA,GAEDvE,EAAKuB,MAAMiD,WACX,MAEJ,QACIoC,QAAQC,IAAIJ,EAAMC,aAIjC,QAAA,QAAA;;ACoEA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvGL,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,eAsGK,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EApGL,IAAMI,EAAY,CACdC,KAAM,EACNC,QAAS,EACTC,SAAU,GAGOC,EAAAA,WAELC,SAAAA,EAAAA,EAAWC,GAAY,EAAA,KAAA,GAC1B7F,KAAAA,MAAQ,KACR4F,KAAAA,UAAYA,EACZC,KAAAA,WAAaA,EACbC,KAAAA,UAAYP,EAAUC,KAEvBT,IAAAA,EAAJ,QAAiB,MAsFpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAnFO,MAAA,WACA,KAAKe,YAAcP,EAAUC,MAAQ,KAAKM,YAAcP,EAAUG,WAIjEI,KAAAA,UAAYP,EAAUE,QACtBzF,KAAAA,MAAQ,IAAIQ,EAAJ,QAAU,SA6E1B,CAAA,IAAA,MA1EK,MAAA,WACE,KAAKsF,YAAcP,EAAUE,UAG5BK,KAAAA,UAAYP,EAAUG,YAsE9B,CAAA,IAAA,OAnEIvG,MAAAA,SAAAA,GACG,KAAK2G,YAAcP,EAAUC,KACxBO,KAAAA,cAAc5G,GACZ,KAAK2G,YAAcP,EAAUE,QAC/BO,KAAAA,iBAAiB7G,GACf,KAAK2G,YAAcP,EAAUG,UAC/BO,KAAAA,oBAAoB9G,KA6DhC,CAAA,IAAA,mBAzDgBA,MAAAA,SAAAA,GACRa,KAAAA,MAAM4B,KAAKzC,KAwDnB,CAAA,IAAA,gBArDaA,MAAAA,SAAAA,GACVA,EAAI+G,KAAK,EAAG,EAAG,KAAKN,UAAW,KAAKC,YACpC1G,EAAIG,UAAY,sBAChBH,EAAII,OAEJJ,EAAIK,KAAO,aACXL,EAAIG,UAAY,QAChBH,EAAIM,UAAY,SAChBN,EAAIQ,SACA,0BACA,KAAKiG,UAAY,EACjB,KAAKC,WAAa,KA0CzB,CAAA,IAAA,sBAtCmB1G,MAAAA,SAAAA,GAChBA,EAAI+G,KAAK,EAAG,EAAG,KAAKN,UAAW,KAAKC,YACpC1G,EAAIG,UAAY,sBAChBH,EAAII,OAEJJ,EAAIK,KAAO,aACXL,EAAIG,UAAY,OAChBH,EAAIM,UAAY,SAChBN,EAAIQ,SACA,WACA,KAAKiG,UAAY,EACjB,KAAKC,WAAa,GAGtB1G,EAAIK,KAAO,aACXL,EAAIG,UAAY,QAEZ6G,IAAAA,EAA4B,OAAf,KAAKnG,MAAiB,KAAKA,MAAMY,MAAQ,EAE1DzB,EAAIQ,SACA,8CAAgDwG,EAChD,KAAKP,UAAa,KAAKA,UAAY,EACnC,KAAKC,WAAc,KAAKA,WAAa,GAGzC1G,EAAIK,KAAO,aACXL,EAAIG,UAAY,OAChBH,EAAIQ,SACA,iCACA,KAAKiG,UAAa,KAAKA,UAAY,EACnC,KAAKC,WAAc,KAAKA,WAAa,KAQ5C,CAAA,IAAA,SAJM/F,MAAAA,SAAAA,GACC,KAAKgG,YAAcP,EAAUE,SACxBzF,KAAAA,MAAM6B,OAAO/B,OAEzB,EA9FgB6F,GA8FhB,QAAA,QAAA;;AC3EL,aA5BA,IAAA,EAAA,EAAA,QAAA,cA4BA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAzBA,IAAIS,EAASpB,SAASqB,eAAe,cAEjClH,EAAMiH,EAAOE,WAAW,MAEtBC,EAAaH,EAAOnI,MACpBuI,EAAcJ,EAAOlI,OAEvBO,EAAO,IAAIkH,EAAJ,QAASY,EAAYC,GAE5BC,EAAW,EAEf,SAASC,EAASC,GACV7G,IAAAA,EAAY6G,EAAYF,EAC5BA,EAAWE,EAGXxH,EAAIyH,UAAU,EAAG,EAAGL,EAAYC,GAGhC/H,EAAKmD,KAAKzC,GACVV,EAAKoD,OAAO/B,GAEZ+G,sBAAsBH,GAG1BG,sBAAsBH","file":"src.d76694e9.js","sourceRoot":"..","sourcesContent":["CanvasRenderingContext2D.prototype.roundRect = function (x, y, width, height, radius) {\n    if (width < 2 * radius) radius = width / 2;\n    if (height < 2 * radius) radius = height / 2;\n    this.beginPath();\n    this.moveTo(x + radius, y);\n    this.arcTo(x + width, y, x + width, y + height, radius);\n    this.arcTo(x + width, y + height, x, y + height, radius);\n    this.arcTo(x, y + height, x, y, radius);\n    this.arcTo(x, y, x + width, y, radius);\n    this.closePath();\n    return this;\n  }\n\nexport default class Piece {\n\n    constructor(game, value, width, height, rowIndex, columnIndex) {\n        this.game = game;\n        this.value = value;\n        this.width = width;\n        this.height = height;\n\n        // Piece`s position on board\n        this.rowIndex = rowIndex;\n        this.columnIndex = columnIndex;\n\n        this.position = null;\n        this.updateCanvasPosition();\n\n        // To move piece\n        this.speed = 0;\n        this.maxSpeed = 10;\n\n        this.isMovingX = false;\n        this.isMovingY = false;\n    }\n\n    updateCanvasPosition() {\n        this.position = {\n            x: 10 + (this.columnIndex * this.width + (10 * this.columnIndex)), \n            y: 10 + (this.rowIndex * this.height + (10 * this.rowIndex))\n        };\n    }\n\n    draw(ctx, emptySpace) {\n        let isEmptySpace = emptySpace === 'undefined' ? false : emptySpace\n\n        if (isEmptySpace) {\n            ctx.roundRect(this.position.x, this.position.y, this.width, this.height, 12);\n            ctx.fillStyle = \"rgba(255, 163, 114, 1)\";\n            ctx.fill();\n            return;\n        }\n\n        let isZero = this.value === 0;\n        if (!isZero) {\n            ctx.roundRect(this.position.x, this.position.y, this.width, this.height, 10);\n            ctx.fillStyle = \"rgba(15, 76, 129, 1)\";\n            ctx.fill();\n\n            ctx.font = \"40px Arial\";\n            ctx.fillStyle = \"rgba(237, 102, 99, 1)\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n\n            let x = this.position.x + (this.width / 2);\n            let y = this.position.y + (this.height / 2);\n            ctx.fillText(this.value, x, y);\n        }   \n    }\n\n    moveLeft() {\n        this._moveHorizontally();\n        this.speed = -this.maxSpeed;\n    }\n\n    moveRight() {\n        this._moveHorizontally();\n        this.speed = this.maxSpeed;\n    }\n\n    _moveHorizontally() {\n        this.isMovingX = true;\n        this.isMovingY = false; \n    }\n\n    moveDown() {\n        this._moveVertically();\n        this.speed = this.maxSpeed;\n    }\n\n    moveUp() {\n        this._moveVertically();\n        this.speed = -this.maxSpeed;\n    }\n\n    _moveVertically() {\n        this.isMovingX = false;\n        this.isMovingY = true; \n    }\n\n    _stopMoving() {\n        this.isMovingX = false;\n        this.isMovingY = false;\n        this.speed = 0;\n    }\n\n    update(deltaTime) {\n\n        let hasArrived = false;\n\n        if (this.isMovingX) {\n            let emptySpace = this.game.board.emptySpace;\n\n            this.position.x = this.position.x + this.speed;\n\n            if (this.speed > 0) {\n                hasArrived = this.position.x >= emptySpace.position.x;\n            } else if (this.speed < 0) {\n                hasArrived = this.position.x <= emptySpace.position.x;\n            }\n\n        } else if (this.isMovingY) {\n            let emptySpace = this.game.board.emptySpace;\n\n            this.position.y = this.position.y + this.speed;\n\n            if (this.speed > 0) {\n                hasArrived = this.position.y >= emptySpace.position.y;\n            } else if (this.speed < 0) {\n                hasArrived = this.position.y <= emptySpace.position.y;\n            }\n        }\n\n        if (hasArrived) {\n            this._stopMoving();\n            this.game.board.updateBoard(this);\n        }\n    }\n}","import Piece from \"/src/piece\";\n\n\nconst MOVES = {\n    LEFT: 0,\n    UP: 1,\n    DOWN: 2,\n    RIGHT: 3\n};\n\nexport default class Board {\n\n    constructor(game) {\n        this.game = game;\n        this.boardSpaces = []\n        this.piecesList = [];\n\n        let pieceWidth = 80;\n        let pieceHeight = 80;\n\n        this.boardMatrix = [];\n        this.moves = 0;\n\n        this.rowEmptyPiece = null;\n        this.columnEmptyPiece = null;\n\n        this.emptySpace = null;\n\n        this.isMoving = false;\n\n        emptyBoard.forEach((row, rowIndex) => {\n            row.forEach((pieceValue, columnIndex) => {\n                this.boardSpaces.push(new Piece(game, pieceValue, pieceWidth, pieceHeight, rowIndex, columnIndex));\n            });\n        });\n\n        solvedBoard.forEach((row, rowIndex) => {\n\n            let piecesRow = []\n\n            row.forEach((pieceValue, columnIndex) => {\n                let piece = new Piece(game, pieceValue, pieceWidth, pieceHeight, rowIndex, columnIndex);\n                this.piecesList.push(piece);\n                piecesRow.push(piece);\n\n                if (pieceValue === 0) {\n                    this.emptySpace = piece;\n                }\n            });\n\n            this.boardMatrix.push(Array.from(piecesRow));\n        });\n\n        this.shuffleFromSolvedGame(1500);\n    }\n\n    draw(ctx) {\n        this.boardSpaces.forEach(space => {\n            space.draw(ctx, true);\n        });\n\n        this.piecesList.forEach(piece => {\n            piece.draw(ctx);\n        });\n    }\n\n    update(deltaTime) {\n        this.piecesList.forEach(piece => piece.update(deltaTime));\n    }\n\n    shuffleFromSolvedGame(plays) {\n        let min = 0;\n        let max = MOVES.RIGHT + 1;\n        let amountMoves = 0;\n\n        while (amountMoves < plays) {\n            var move = Math.trunc(Math.random() * (+max - +min) + min);\n\n            if (this._movePieceOn(move)) {\n                amountMoves += 1;\n            }\n        }\n    }\n\n    _movePieceOn(move) {\n        let pieceToMove = this._getPieceToMoveFromEmptySpace(move);\n        if (pieceToMove) {\n            this.updateBoardMatrix(pieceToMove);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    _getPieceToMoveFromEmptySpace(move) {\n        let rowIdxPieceToMove = this.emptySpace.rowIndex;\n        let colIdxPieceToMove = this.emptySpace.columnIndex;\n\n        switch (move) {\n            case MOVES.RIGHT:\n                colIdxPieceToMove = this.emptySpace.columnIndex - 1;\n                break;\n            case MOVES.LEFT:\n                colIdxPieceToMove = this.emptySpace.columnIndex + 1;\n                break;\n            case MOVES.DOWN:\n                rowIdxPieceToMove = this.emptySpace.rowIndex - 1;\n                break;\n            case MOVES.UP:\n                rowIdxPieceToMove = this.emptySpace.rowIndex + 1;\n                break;\n        }\n\n        return this._getPieceToMoveBy(rowIdxPieceToMove, colIdxPieceToMove);\n    }\n\n    moveLeft() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let newEmptySpaceColumn = this.emptySpace.columnIndex + 1;\n            let pieceToMove = this._getPieceToMoveBy(this.emptySpace.rowIndex, newEmptySpaceColumn);\n\n            if (pieceToMove) {\n                pieceToMove.moveLeft();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveRight() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let newEmptySpaceColumn = this.emptySpace.columnIndex - 1;\n            let pieceToMove = this._getPieceToMoveBy(this.emptySpace.rowIndex, newEmptySpaceColumn);\n\n            if (pieceToMove) {\n                pieceToMove.moveRight();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveUp() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let rowIdxPieceToMove = this.emptySpace.rowIndex + 1;\n            let pieceToMove = this._getPieceToMoveBy(rowIdxPieceToMove, this.emptySpace.columnIndex);\n\n            if (pieceToMove) {\n                pieceToMove.moveUp();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveDown() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let rowIdxPieceToMove = this.emptySpace.rowIndex - 1;\n            let pieceToMove = this._getPieceToMoveBy(rowIdxPieceToMove, this.emptySpace.columnIndex);\n\n            if (pieceToMove) {\n                pieceToMove.moveDown();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    _getPieceToMoveBy(rowIndex, columnIndex) {\n        let pieceToMove = null;\n\n        let rowsSize = this.boardMatrix.length;\n        let columnsSize = this.boardMatrix[0].length;\n\n        let rowIdxOk = rowIndex >= 0 && rowIndex < rowsSize;\n        let columnIdxOk = columnIndex >= 0 && columnIndex < columnsSize;\n\n        if (rowIdxOk && columnIdxOk) {\n            pieceToMove = this.boardMatrix[rowIndex][columnIndex];\n        }\n\n        return pieceToMove;\n    }\n\n    updateBoard(pieceToUpdate) {\n        this.updateBoardMatrix(pieceToUpdate);\n        this.updateMoves();\n        this.evaluateGame();\n    }\n\n    updateMoves() {\n        this.moves += 1;\n    }\n\n    updateBoardMatrix(pieceToUpdate) {\n        let emptyRowIndex = this.emptySpace.rowIndex;\n        let emptyColumnIndex = this.emptySpace.columnIndex;\n\n        let pieceRowIndex = pieceToUpdate.rowIndex;\n        let pieceColumnIndex = pieceToUpdate.columnIndex;\n\n        pieceToUpdate.rowIndex = emptyRowIndex;\n        pieceToUpdate.columnIndex = emptyColumnIndex;\n        this.boardMatrix[emptyRowIndex][emptyColumnIndex] = pieceToUpdate;\n        pieceToUpdate.updateCanvasPosition();\n\n        this.emptySpace.rowIndex = pieceRowIndex;\n        this.emptySpace.columnIndex = pieceColumnIndex;\n        this.boardMatrix[pieceRowIndex][pieceColumnIndex] = this.emptySpace;\n        this.emptySpace.updateCanvasPosition();\n\n        this.isMoving = false;\n    }\n\n    evaluateGame() {\n        let isWinner = isWinnerBoard(this.boardMatrix);\n\n        if (isWinner) {\n            this.game.win();\n        }\n    }\n}\n\nfunction isWinnerBoard(currentBoard) {\n\n    if (!currentBoard) {\n        return false;\n    }\n\n    if (currentBoard.length !== winnerBoard.length) {\n        return false;\n    }\n\n    let rowsLength = winnerBoard.length;\n    let columnsLength = winnerBoard[0].length;\n\n    for (let rowIdx = 0; rowIdx < rowsLength; rowIdx++) {\n        for (let colIdx = 0; colIdx < columnsLength; colIdx++) {\n            let currentPiece = currentBoard[rowIdx][colIdx];\n            let valueWinnerPiece = winnerBoard[rowIdx][colIdx];\n\n            if (currentPiece.value !== valueWinnerPiece) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction generateBoardGame(rows, columns) {\n    let piecesValues = Array.from(Array(rows * columns).keys());\n    let  boardGame = [];\n\n    let min = 0;\n    for (let rowIdx = 0; rowIdx < rows; rowIdx++) {\n        let values = [];\n        for (let colIdx = 0; colIdx < columns; colIdx++) {\n            let max = piecesValues.length;\n            var randomIdx = Math.random() * (+max - +min) + min;\n            let value = piecesValues.splice(randomIdx, 1)[0];\n\n            values.push(value);\n        }\n        boardGame.push(values);\n    }\n    return boardGame;\n}\n\nconst emptyBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n];\n\nconst solvedBoard = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 0]\n];\n\nconst winnerBoard = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 0]\n];\n","export default class InputHandler {\n\n    constructor(game) {\n        document.addEventListener(\"keydown\", event => {\n            switch (event.keyCode) {\n                case 32:\n                    // SPACEBAR\n                    game.start();\n                    break;\n\n                case 37:\n                    // left arrow\n                    game.board.moveLeft(); \n                    break;\n\n                case 39:\n                    // right arrow\n                    game.board.moveRight(); \n                    break;\n\n                case 38:\n                    // up arrow\n                    game.board.moveUp();\n                    break;\n\n                case 40:\n                    // down arrow\n                    game.board.moveDown();\n                    break;\n\n                default:\n                    console.log(event.keyCode);\n            }\n\n        });\n    }\n\n}","import Board from \"/src/board\";\nimport InputHandler from \"/src/input\"\n\nconst GAMESTATE = {\n    MENU: 0,\n    RUNNING: 1,\n    FINISHED: 2\n};\n\nexport default class Game {\n\n    constructor(gameWidth, gameHeight) {\n        this.board = null;\n        this.gameWidth = gameWidth;\n        this.gameHeight = gameHeight;\n        this.gameState = GAMESTATE.MENU;\n\n        new InputHandler(this);\n    }\n\n    start() {\n        if (this.gameState !== GAMESTATE.MENU && this.gameState !== GAMESTATE.FINISHED) {\n            return;\n        }\n\n        this.gameState = GAMESTATE.RUNNING;\n        this.board = new Board(this);\n    }\n\n    win() {\n        if (this.gameState !== GAMESTATE.RUNNING) {\n            return;\n        }\n        this.gameState = GAMESTATE.FINISHED;\n    }\n\n    draw(ctx) {\n        if (this.gameState === GAMESTATE.MENU) {\n            this._drawMenuGame(ctx);\n        } else if (this.gameState === GAMESTATE.RUNNING) {\n            this._drawRunningGame(ctx);\n        } else if (this.gameState === GAMESTATE.FINISHED) {\n            this._drawMenuWinnerGame(ctx);\n        }\n    }\n\n    _drawRunningGame(ctx) {\n        this.board.draw(ctx);\n    }\n\n    _drawMenuGame(ctx) {\n        ctx.rect(0, 0, this.gameWidth, this.gameHeight);\n        ctx.fillStyle = \"rgba(27, 38, 44, 1)\";\n        ctx.fill();\n\n        ctx.font = \"30px Arial\";\n        ctx.fillStyle = \"white\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\n            \"Press SPACEBAR To Start\",\n            this.gameWidth / 2,\n            this.gameHeight / 2\n        );\n    }\n\n    _drawMenuWinnerGame(ctx) {\n        ctx.rect(0, 0, this.gameWidth, this.gameHeight);\n        ctx.fillStyle = \"rgba(27, 38, 44, 1)\";\n        ctx.fill();\n\n        ctx.font = \"60px Arial\";\n        ctx.fillStyle = \"gold\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\n            \"You Win!\",\n            this.gameWidth / 2,\n            this.gameHeight / 2\n        );\n\n        ctx.font = \"16px Arial\";\n        ctx.fillStyle = \"white\";\n\n        let movesToWin = this.board !== null ? this.board.moves : 0;\n\n        ctx.fillText(\n            \"Moves .................................... \" + movesToWin,\n            this.gameWidth - (this.gameWidth / 2),\n            this.gameHeight - (this.gameHeight / 4)\n        );\n\n        ctx.font = \"12px Arial\";\n        ctx.fillStyle = \"lime\";\n        ctx.fillText(\n            \"(Press SPACEBAR to play again)\",\n            this.gameWidth - (this.gameWidth / 2),\n            this.gameHeight - (this.gameHeight / 8)\n        );\n    }\n\n    update(deltaTime) {\n        if (this.gameState === GAMESTATE.RUNNING) {\n            this.board.update(deltaTime);\n        }\n    }\n}","import Game from \"/src/game\";\n\n\nlet canvas = document.getElementById(\"gameScreen\");\n\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = canvas.width;\nconst GAME_HEIGHT = canvas.height;\n\nlet game = new Game(GAME_WIDTH, GAME_HEIGHT);\n\nlet lastTime = 0;\n\nfunction gameLoop(timestamp) {\n    let deltaTime = timestamp - lastTime;\n    lastTime = timestamp;\n\n    // clearRect faz com que ao se redesenhar um novo rect na tela, os anteriores do mesmo sejam limpos da tela\n    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n\n    // game.update(deltaTime);\n    game.draw(ctx);\n    game.update(deltaTime);\n\n    requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);"]}