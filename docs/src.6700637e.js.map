{"version":3,"sources":["src/piece.js","src/board.js","src/input.js","src/game.js","src/index.js"],"names":["Piece","game","value","width","height","rowIndex","columnIndex","position","updateCanvasPosition","speed","maxSpeed","isMovingX","isMovingY","x","y","ctx","emptySpace","isEmptySpace","fillStyle","fillRect","font","textAlign","textBaseline","fillText","_moveHorizontally","_moveVertically","deltaTime","hasArrived","board","_stopMoving","updateBoard","Board","boardSpaces","piecesList","boardMatrix","moves","rowEmptyPiece","columnEmptyPiece","isMoving","emptyBoard","forEach","row","pieceValue","push","generateBoardGame","piecesRow","piece","Array","from","space","draw","update","console","log","moveRight","newEmptySpaceColumn","pieceToMove","_getPieceToMoveBy","moveLeft","rowIdxPieceToMove","moveUp","moveDown","rowsSize","length","columnsSize","pieceToUpdate","updateBoardMatrix","updateMoves","evaluateGame","emptyRowIndex","emptyColumnIndex","pieceRowIndex","pieceColumnIndex","isWinnerBoard","win","currentBoard","winnerBoard","rowsLength","columnsLength","rowIdx","colIdx","currentPiece","valueWinnerPiece","rows","columns","piecesValues","keys","boardGame","values","max","randomIdx","Math","random","splice","solvedBoard","InputHandler","document","addEventListener","event","keyCode","start","GAMESTATE","MENU","RUNNING","FINISHED","Game","gameWidth","gameHeight","gameState","_drawMenuGame","_drawRunningGame","_drawMenuWinnerGame","rect","fill","movesToWin","canvas","getElementById","getContext","GAME_WIDTH","GAME_HEIGHT","lastTime","gameLoop","timestamp","clearRect","requestAnimationFrame"],"mappings":"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","file":"src.6700637e.js","sourceRoot":"..","sourcesContent":["export default class Piece {\n\n    constructor(game, value, width, height, rowIndex, columnIndex) {\n        this.game = game;\n        this.value = value;\n        this.width = width;\n        this.height = height;\n\n        // Piece`s position on board\n        this.rowIndex = rowIndex;\n        this.columnIndex = columnIndex;\n\n        this.position = null;\n        this.updateCanvasPosition();\n\n        // To move piece\n        this.speed = 0;\n        this.maxSpeed = 10;\n\n        this.isMovingX = false;\n        this.isMovingY = false;\n    }\n\n    updateCanvasPosition() {\n        this.position = {\n            x: 10 + (this.columnIndex * this.width + (10 * this.columnIndex)), \n            y: 10 + (this.rowIndex * this.height + (10 * this.rowIndex))\n        };\n    }\n\n    draw(ctx, emptySpace) {\n        let isEmptySpace = emptySpace === 'undefined' ? false : emptySpace\n\n        if (isEmptySpace) {\n            ctx.fillStyle = \"rgba(255, 163, 114, 1)\";\n            ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n            return;\n        }\n\n        let isZero = this.value === 0;\n        if (!isZero) {\n            ctx.fillStyle = \"rgba(15, 76, 129, 1)\";\n            ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n\n            ctx.font = \"40px Arial\";\n            ctx.fillStyle = \"rgba(237, 102, 99, 1)\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n\n            let x = this.position.x + (this.width / 2);\n            let y = this.position.y + (this.height / 2);\n            ctx.fillText(this.value, x, y);\n        }\n        \n    }\n\n    moveLeft() {\n        this._moveHorizontally();\n        this.speed = -this.maxSpeed;\n    }\n\n    moveRight() {\n        this._moveHorizontally();\n        this.speed = this.maxSpeed;\n    }\n\n    _moveHorizontally() {\n        this.isMovingX = true;\n        this.isMovingY = false; \n    }\n\n    moveDown() {\n        this._moveVertically();\n        this.speed = this.maxSpeed;\n    }\n\n    moveUp() {\n        this._moveVertically();\n        this.speed = -this.maxSpeed;\n    }\n\n    _moveVertically() {\n        this.isMovingX = false;\n        this.isMovingY = true; \n    }\n\n    _stopMoving() {\n        this.isMovingX = false;\n        this.isMovingY = false;\n        this.speed = 0;\n    }\n\n    update(deltaTime) {\n\n        let hasArrived = false;\n\n        if (this.isMovingX) {\n            let emptySpace = this.game.board.emptySpace;\n\n            this.position.x = this.position.x + this.speed;\n\n            if (this.speed > 0) {\n                hasArrived = this.position.x >= emptySpace.position.x;\n            } else if (this.speed < 0) {\n                hasArrived = this.position.x <= emptySpace.position.x;\n            }\n\n        } else if (this.isMovingY) {\n            let emptySpace = this.game.board.emptySpace;\n\n            this.position.y = this.position.y + this.speed;\n\n            if (this.speed > 0) {\n                hasArrived = this.position.y >= emptySpace.position.y;\n            } else if (this.speed < 0) {\n                hasArrived = this.position.y <= emptySpace.position.y;\n            }\n        }\n\n        if (hasArrived) {\n            this._stopMoving();\n            this.game.board.updateBoard(this);\n        }\n    }\n}","import Piece from \"/src/piece\";\n\nexport default class Board {\n\n    constructor(game) {\n        this.game = game;\n        this.boardSpaces = []\n        this.piecesList = [];\n\n        let pieceWidth = 80;\n        let pieceHeight = 80;\n\n        this.boardMatrix = [];\n        this.moves = 0;\n\n        this.rowEmptyPiece = null;\n        this.columnEmptyPiece = null;\n\n        this.emptySpace = null;\n\n        this.isMoving = false;\n\n        emptyBoard.forEach((row, rowIndex) => {\n            row.forEach((pieceValue, columnIndex) => {\n                this.boardSpaces.push(new Piece(game, pieceValue, pieceWidth, pieceHeight, rowIndex, columnIndex));\n            });\n        });\n\n        let boardGame = generateBoardGame(4, 4);\n\n        boardGame.forEach((row, rowIndex) => {\n\n            let piecesRow = []\n\n            row.forEach((pieceValue, columnIndex) => {\n                let piece = new Piece(game, pieceValue, pieceWidth, pieceHeight, rowIndex, columnIndex);\n                this.piecesList.push(piece);\n                piecesRow.push(piece);\n\n                if (pieceValue === 0) {\n                    this.emptySpace = piece;\n                }\n            });\n\n            this.boardMatrix.push(Array.from(piecesRow));\n        });\n    }\n\n    draw(ctx) {\n        this.boardSpaces.forEach(space => {\n            space.draw(ctx, true);\n        });\n\n        this.piecesList.forEach(piece => {\n            piece.draw(ctx);\n        });\n    }\n\n    update(deltaTime) {\n        this.piecesList.forEach(piece => piece.update(deltaTime));\n    }\n\n    shuffleFromSolvedGame() {\n        console.log(\"Chamei o shuffle\");\n        this.moveRight();\n        this.moveRight();\n        this.moveRight();\n    }\n\n    moveLeft() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let newEmptySpaceColumn = this.emptySpace.columnIndex + 1;\n            let pieceToMove = this._getPieceToMoveBy(this.emptySpace.rowIndex, newEmptySpaceColumn);\n\n            if (pieceToMove) {\n                pieceToMove.moveLeft();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveRight() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let newEmptySpaceColumn = this.emptySpace.columnIndex - 1;\n            let pieceToMove = this._getPieceToMoveBy(this.emptySpace.rowIndex, newEmptySpaceColumn);\n\n            if (pieceToMove) {\n                pieceToMove.moveRight();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveUp() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let rowIdxPieceToMove = this.emptySpace.rowIndex + 1;\n            let pieceToMove = this._getPieceToMoveBy(rowIdxPieceToMove, this.emptySpace.columnIndex);\n\n            if (pieceToMove) {\n                pieceToMove.moveUp();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    moveDown() {\n        if (!this.isMoving) {\n            this.isMoving = true;\n\n            let rowIdxPieceToMove = this.emptySpace.rowIndex - 1;\n            let pieceToMove = this._getPieceToMoveBy(rowIdxPieceToMove, this.emptySpace.columnIndex);\n\n            if (pieceToMove) {\n                pieceToMove.moveDown();\n            } else {\n                this.isMoving = false;\n            }\n        }\n    }\n\n    _getPieceToMoveBy(rowIndex, columnIndex) {\n        let pieceToMove = null;\n\n        let rowsSize = this.boardMatrix.length;\n        let columnsSize = this.boardMatrix[0].length;\n\n        let rowIdxOk = rowIndex >= 0 && rowIndex < rowsSize;\n        let columnIdxOk = columnIndex >= 0 && columnIndex < columnsSize;\n\n        if (rowIdxOk && columnIdxOk) {\n            pieceToMove = this.boardMatrix[rowIndex][columnIndex];\n        }\n\n        return pieceToMove;\n    }\n\n    updateBoard(pieceToUpdate) {\n        this.updateBoardMatrix(pieceToUpdate);\n        this.updateMoves();\n        this.evaluateGame();\n    }\n\n    updateMoves() {\n        this.moves += 1;\n    }\n\n    updateBoardMatrix(pieceToUpdate) {\n        let emptyRowIndex = this.emptySpace.rowIndex;\n        let emptyColumnIndex = this.emptySpace.columnIndex;\n\n        let pieceRowIndex = pieceToUpdate.rowIndex;\n        let pieceColumnIndex = pieceToUpdate.columnIndex;\n\n        pieceToUpdate.rowIndex = emptyRowIndex;\n        pieceToUpdate.columnIndex = emptyColumnIndex;\n        this.boardMatrix[emptyRowIndex][emptyColumnIndex] = pieceToUpdate;\n        pieceToUpdate.updateCanvasPosition();\n\n        this.emptySpace.rowIndex = pieceRowIndex;\n        this.emptySpace.columnIndex = pieceColumnIndex;\n        this.boardMatrix[pieceRowIndex][pieceColumnIndex] = this.emptySpace;\n        this.emptySpace.updateCanvasPosition();\n\n        this.isMoving = false;\n    }\n\n    evaluateGame() {\n        let isWinner = isWinnerBoard(this.boardMatrix);\n\n        if (isWinner) {\n            this.game.win();\n        }\n    }\n}\n\nfunction isWinnerBoard(currentBoard) {\n\n    if (!currentBoard) {\n        return false;\n    }\n\n    if (currentBoard.length !== winnerBoard.length) {\n        return false;\n    }\n\n    let rowsLength = winnerBoard.length;\n    let columnsLength = winnerBoard[0].length;\n\n    for (let rowIdx = 0; rowIdx < rowsLength; rowIdx++) {\n        for (let colIdx = 0; colIdx < columnsLength; colIdx++) {\n            let currentPiece = currentBoard[rowIdx][colIdx];\n            let valueWinnerPiece = winnerBoard[rowIdx][colIdx];\n\n            if (currentPiece.value !== valueWinnerPiece) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction generateBoardGame(rows, columns) {\n    let piecesValues = Array.from(Array(rows * columns).keys());\n    let  boardGame = [];\n\n    let min = 0;\n    for (let rowIdx = 0; rowIdx < rows; rowIdx++) {\n        let values = [];\n        for (let colIdx = 0; colIdx < columns; colIdx++) {\n            let max = piecesValues.length;\n            var randomIdx = Math.random() * (+max - +min) + min;\n            let value = piecesValues.splice(randomIdx, 1)[0];\n\n            values.push(value);\n        }\n        boardGame.push(values);\n    }\n    return boardGame;\n}\n\nconst emptyBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n];\n\nconst solvedBoard = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 0]\n];\n\nconst winnerBoard = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 0]\n];\n","export default class InputHandler {\n\n    constructor(game) {\n        document.addEventListener(\"keydown\", event => {\n            switch (event.keyCode) {\n                case 32:\n                    // SPACEBAR\n                    game.start();\n                    break;\n\n                case 37:\n                    // left arrow\n                    game.board.moveLeft(); \n                    break;\n\n                case 39:\n                    // right arrow\n                    game.board.moveRight(); \n                    break;\n\n                case 38:\n                    // up arrow\n                    game.board.moveUp();\n                    break;\n\n                case 40:\n                    // down arrow\n                    game.board.moveDown();\n                    break;\n\n                default:\n                    console.log(event.keyCode);\n            }\n\n        });\n    }\n\n}","import Board from \"/src/board\";\nimport InputHandler from \"/src/input\"\n\nconst GAMESTATE = {\n    MENU: 0,\n    RUNNING: 1,\n    FINISHED: 2\n};\n\nexport default class Game {\n\n    constructor(gameWidth, gameHeight) {\n        this.board = null;\n        this.gameWidth = gameWidth;\n        this.gameHeight = gameHeight;\n        this.gameState = GAMESTATE.MENU ;\n\n        new InputHandler(this);\n    }\n\n    start() {\n        if (this.gameState !== GAMESTATE.MENU && this.gameState !== GAMESTATE.FINISHED) {\n            return;\n        }\n\n        this.gameState = GAMESTATE.RUNNING;\n        this.board = new Board(this);\n    }\n\n    win() {\n        if (this.gameState !== GAMESTATE.RUNNING) {\n            return;\n        }\n        this.gameState = GAMESTATE.FINISHED;\n    }\n\n    draw(ctx) {\n        if (this.gameState === GAMESTATE.MENU) {\n            this._drawMenuGame(ctx);\n        } else if (this.gameState === GAMESTATE.RUNNING) {\n            this._drawRunningGame(ctx);\n        } else if (this.gameState === GAMESTATE.FINISHED) {\n            this._drawMenuWinnerGame(ctx);\n        }\n    }\n\n    _drawRunningGame(ctx) {\n        // black = rgba(27, 38, 44, 1)\n        // blue = rgba(15, 76, 129, 1)\n        // orange = rgba(237, 102, 99, 1)\n        // cool orange = rgba(255, 163, 114, 1)\n\n        this.board.draw(ctx);\n    }\n\n    _drawMenuGame(ctx) {\n        ctx.rect(0, 0, this.gameWidth, this.gameHeight);\n        ctx.fillStyle = \"rgba(27, 38, 44, 1)\";\n        ctx.fill();\n\n        ctx.font = \"30px Arial\";\n        ctx.fillStyle = \"white\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\n            \"Press SPACEBAR To Start\",\n            this.gameWidth / 2,\n            this.gameHeight / 2\n        );\n    }\n\n    _drawMenuWinnerGame(ctx) {\n        ctx.rect(0, 0, this.gameWidth, this.gameHeight);\n        ctx.fillStyle = \"rgba(27, 38, 44, 1)\";\n        ctx.fill();\n\n        ctx.font = \"60px Arial\";\n        ctx.fillStyle = \"gold\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\n            \"You Win!\",\n            this.gameWidth / 2,\n            this.gameHeight / 2\n        );\n\n        ctx.font = \"16px Arial\";\n        ctx.fillStyle = \"white\";\n\n        let movesToWin = this.board !== null ? this.board.moves : 0;\n\n        ctx.fillText(\n            \"Moves .................................... \" + movesToWin,\n            this.gameWidth - (this.gameWidth / 2),\n            this.gameHeight - (this.gameHeight / 4)\n        );\n\n        ctx.font = \"12px Arial\";\n        ctx.fillStyle = \"lime\";\n        ctx.fillText(\n            \"(Press SPACEBAR to play again)\",\n            this.gameWidth - (this.gameWidth / 2),\n            this.gameHeight - (this.gameHeight / 8)\n        );\n    }\n\n    update(deltaTime) {\n        if (this.gameState === GAMESTATE.RUNNING) {\n            this.board.update(deltaTime);\n        }\n    }\n}","import Game from \"/src/game\";\n\n\nlet canvas = document.getElementById(\"gameScreen\");\n\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = canvas.width;\nconst GAME_HEIGHT = canvas.height;\n\nlet game = new Game(GAME_WIDTH, GAME_HEIGHT);\n\nlet lastTime = 0;\n\nfunction gameLoop(timestamp) {\n    let deltaTime = timestamp - lastTime;\n    lastTime = timestamp;\n\n    // clearRect faz com que ao se redesenhar um novo rect na tela, os anteriores do mesmo sejam limpos da tela\n    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n\n    // game.update(deltaTime);\n    game.draw(ctx);\n    game.update(deltaTime);\n\n    requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);"]}